name: Deploy

on:
  pull_request:
    branches:
      - master
    paths:
      - '*'

jobs:
  quality:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: '14.16.0'

      - name: Check node_modules cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install JS dependencies if not cached
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn

      - name: Run quality checks
        run: |
          yarn test
          yarn tsc
          yarn lint

  android:
    runs-on: ubuntu-latest

    needs: quality

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: '14.16.0'

      - name: Check node_modules cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install JS dependencies if not cached
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          java-version: '11'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6
          bundler-cache: true

      - name: Check Bundler cache
        uses: actions/cache@v2
        with:
          path: android/vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install Gem dependencies
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
        working-directory: android

      - name: Create the release.keystore
        run: |
          echo "${{secrets.RELEASE_KEYSTORE}}" > release.keystore.asc
          gpg -d --passphrase "${{secrets.RELEASE_KEYSTORE_PASSPHRASE}}" --batch release.keystore.asc > app/release.keystore
        working-directory: android

      - name: Create the Google Credential Key
        run: |
          echo "${{secrets.GOOGLE_CREDENTIAL_KEY}}" > google-credential-key.json.asc
          gpg -d --passphrase "${{secrets.GOOGLE_CREDENTIAL_KEY_PASSPHRASE}}" --batch google-credential-key.json.asc > google-credential-key.json
        working-directory: android

      - name: Populate the Fastlane env file
        run: |
          echo "${{secrets.FASTLANE_ENV_ANDROID}}" > .env.fastlane.android.asc
          gpg -d --passphrase "${{secrets.FASTLANE_ENV_ANDROID_PASSPHRASE}}" --batch .env.fastlane.android.asc > fastlane/.env
        working-directory: android

      - name: Populate the Staging env file
        run: |
          echo "${{secrets.STAGING_ENV}}" > .env.staging.asc
          gpg -d --passphrase "${{secrets.STAGING_ENV_PASSPHRASE}}" --batch .env.staging.asc > .env.staging

      # - name: Populate the Production env file
      #   run: |
      #     echo "${{secrets.PRODUCTION_ENV}}" > .env.production.asc
      #     gpg -d --passphrase "${{secrets.PRODUCTION_ENV_PASSPHRASE}}" --batch .env.production.asc > .env.production

      - name: Set the current app version based on commit history
        run: yarn version:bump

      - name: Check Gradle cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Upload a Staging build to App Center
        run: bundle exec fastlane release_staging
        working-directory: android

      # - name: Upload a Production build to the Play Console
      #   run: bundle exec fastlane release_production
      #   working-directory: android

  ios:
    runs-on: macos-latest

    needs: quality

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Add a Deploy Key to access the Match repo
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: '14.16.0'

      - name: Check node_modules cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install JS dependencies if not cached
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn

      - name: Check Bundler cache
        uses: actions/cache@v2
        with:
          path: ios/vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Install Gem dependencies
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
        working-directory: ios

      - name: Check Pod cache
        uses: actions/cache@v2
        with:
          path: ios/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install pods
        run: pod install
        working-directory: ios

      - name: Create the Apple Connect Key
        run: |
          echo "${{secrets.APPLE_CONNECT_KEY}}" > AuthKey_7GF3V4HFK9.p8.asc
          gpg -d --passphrase "${{secrets.APPLE_CONNECT_KEY_PASSPHRASE}}" --batch AuthKey_7GF3V4HFK9.p8.asc > AuthKey_7GF3V4HFK9.p8
        working-directory: ios

      - name: Populate the Fastlane env file
        run: |
          echo "${{secrets.FASTLANE_ENV_IOS}}" > .env.fastlane.ios.asc
          gpg -d --passphrase "${{secrets.FASTLANE_ENV_IOS_PASSPHRASE}}" --batch .env.fastlane.ios.asc > fastlane/.env
        working-directory: ios

      - name: Populate the Staging env file
        run: |
          echo "${{secrets.STAGING_ENV}}" > .env.staging.asc
          gpg -d --passphrase "${{secrets.STAGING_ENV_PASSPHRASE}}" --batch .env.staging.asc > .env.staging

      # - name: Populate the Production env file
      #   run: |
      #     echo "${{secrets.PRODUCTION_ENV}}" > .env.production.asc
      #     gpg -d --passphrase "${{secrets.PRODUCTION_ENV_PASSPHRASE}}" --batch .env.production.asc > .env.production

      - name: Set the current app version based on commit history
        run: yarn version:bump

      - name: Create a temporary Keychain
        run: bundle exec fastlane keychain_setup
        working-directory: ios

      - name: Upload a Staging build to App Center
        run: bundle exec fastlane release_staging is_ci:true
        working-directory: ios

      # - name: Upload a Production build to Apple Connect
      #   run: bundle exec fastlane release_production is_ci:true
      #   working-directory: ios
