default_platform(:ios)

platform :ios do
  ##############################################
  ####            Certificates               ###
  ##############################################

  desc "Util to pull the correct certificates"
  private_lane :match_pull do |options|
    case options[:env]
      when "production"
        options[:app_identifier] = ENV["IOS_APP_ID"]
        options[:type] = "appstore"
      when "staging"
        options[:app_identifier] = "#{ENV["IOS_APP_ID"]}.staging"
        options[:type] = "adhoc"
      when "development"
        options[:app_identifier] = "#{ENV["IOS_APP_ID"]}.development"
        options[:type] = "development"
      else
        UI.error "`env` option is required"
        exit
    end

    if options[:readonly] == false
      options[:force_for_new_devices] = true
    end

    if options[:is_ci] == true
      match(
        app_identifier: options[:app_identifier],
        type: options[:type],
        readonly: options[:readonly],
        force_for_new_devices: options[:force_for_new_devices],
        keychain_name: options[:keychain_name],
        keychain_password: options[:keychain_password],
        git_private_key: ENV["MATCH_GIT_PRIVATE_KEY_CI"],
      )
    else 
      match(
        app_identifier: options[:app_identifier],
        type: options[:type],
        readonly: options[:readonly],
        force_for_new_devices: options[:force_for_new_devices],
      )
    end
  end

  desc "Pull all Certificates for every schemes"
  lane :match_pull_all do
    ["production", "staging", "development"].each do |env|
      match_pull(
        env: env,
        readonly: true,
      )
    end
  end

  desc "Create new Certificates when adding new testers UDID"
  lane :add_testers do
    register_devices(
      devices_file: "./fastlane/devices.txt",
    )

    ["staging", "development"].each do |env|
      match_pull(
        env: env,
        readonly: false,
      )
    end
  end

  desc "Create a new Push Certificate if needed"
  lane :pem_check do |options|
    case options[:env]
      when "production"
        options[:app_identifier] = ENV["IOS_APP_ID"]
      when "staging"
        options[:app_identifier] = "#{ENV["IOS_APP_ID"]}.staging"
      when "development"
        options[:app_identifier] = "#{ENV["IOS_APP_ID"]}.development"
      else
        exit
    end

    pem(
      app_identifier: options[:app_identifier],
      generate_p12: true,
      save_private_key: true,
    )
  end

  ##############################################
  ####              Utilities                ###
  ##############################################

  desc "Verify that the current build has new user facing features"
  private_lane :verify do
    analyze_commits(
      match: "v*"
    )
  end

  desc "Create a temporary Keychain to be used when running on CI"
  lane :keychain_setup do
    create_keychain(
      name: "KeychainCI",
      password: ENV["KEYCHAIN_CI_PASSWORD"],
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: true,
    )
  end

  ##############################################
  ####             Build steps               ###
  ##############################################

  desc "Util to build the app for all schemes"
  private_lane :build do |options|
    if options[:method] && options[:scheme]
      increment_build_number_in_plist(
        xcodeproj: ENV["IOS_XCODEPROJ"],
        scheme: options[:scheme],
        build_number: Time.now.utc.strftime("%Y%m%d.%H%M.%S"),
      )
      build_app(
        workspace: ENV["IOS_WORKSPACE"],
        configuration: "Release",
        scheme: options[:scheme],
        export_method: options[:method],
        silent: true,
        clean: true,
      )
    else
      UI.error "`method` and `scheme` options are required"
      exit
    end
  end

  ##############################################
  ####               CI steps                ###
  ##############################################

  desc "Create and upload a Staging build"
  lane :release_staging do |options|
    if verify
      match_pull(
        env: "staging",
        readonly: true,
        is_ci: options[:is_ci],
        keychain_name: "KeychainCI",
        keychain_password: ENV["KEYCHAIN_CI_PASSWORD"],
      )
      build(
        method: "ad-hoc",
        scheme: "rnStarter-staging",
      )
      appcenter_upload(
        api_token: ENV["APPCENTER_API_TOKEN"],
        owner_type: ENV["APPCENTER_OWNER_TYPE"],
        owner_name: ENV["APPCENTER_OWNER_NAME"],
        app_name: ENV["APPCENTER_APP_NAME"],
        notify_testers: false,
        release_notes: sh(
          log: false,
          command: "yarn --silent version:changelog",
        ),
      )
    else
      UI.error "No user facing changes since the last release!"
    end
  end

  desc "Create and upload a Production build"
  lane :release_production do |options|
    if verify
      if options[:is_ci] == true
        api_key = app_store_connect_api_key(
          key_id: ENV["APPLE_CONNECT_KEY_ID"],
          issuer_id: ENV["APPLE_CONNECT_ISSUER_ID"],
          key_filepath: ENV["APPLE_CONNECT_KEY_PATH"],
        )
      end

      match_pull(
        env: "production",
        readonly: true,
        is_ci: options[:is_ci],
        keychain_name: "KeychainCI",
        keychain_password: ENV["KEYCHAIN_CI_PASSWORD"],
      )
      build(
        method: "app-store",
        scheme: "rnStarter-production",
      )
      upload_to_testflight(
        api_key: api_key,
        app_identifier: ENV["IOS_APP_ID"],
        team_id: ENV["IOS_TEAM_ID"],
        skip_waiting_for_build_processing: true,
        changelog: sh(
          log: false,
          command: "yarn --silent version:changelog",
        ),
      )
    else
      UI.error "No user facing changes since the last release!"
    end
  end  
end
